<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>IOFiber</title>
    <link>https://vinipsmaker.github.io/iofiber/</link>
    <description>Recent content on IOFiber</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://vinipsmaker.github.io/iofiber/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>IOFiber</title>
      <link>https://vinipsmaker.github.io/iofiber/tutorial/iofiber/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://vinipsmaker.github.io/iofiber/tutorial/iofiber/</guid>
      <description>Fibers are lightweight threads managed in user-space. Fibers from this library are:
   Stackful.
  Cooperative.
  Use Boost.Asio execution contexts (e.g. boost::asio::io_context) as schedulers. Any async function will work as a suspension point.
  Non-symmetric. Main fiber and secondary fibers are exposed to different APIs. There is a clear separation between fibers that run inside and outside ASIO&amp;#8217;s execution contexts.
   trial::iofiber::fiber is an alias for trial::iofiber::basic_fiber&amp;lt;boost::asio::io_context::strand&amp;gt;.</description>
    </item>
    
    <item>
      <title>this_fiber</title>
      <link>https://vinipsmaker.github.io/iofiber/ref/this_fiber/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://vinipsmaker.github.io/iofiber/ref/this_fiber/</guid>
      <description>class fiber::this_fiber;   To have access to a this_fiber object, just spawn() a fiber and an object of this type will be created for you. You can copy and pass it around freely to other functions as you wish, but you should only use its methods within the fiber context (i.e. within the fiber execution stack) that created it.
   Important  fiber is a typedef for basic_fiber&amp;lt;boost::asio::io_context::strand&amp;gt;.</description>
    </item>
    
  </channel>
</rss>